@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <h1>汎用アンケート</h1>
</div>
<form id="Questions" class="p-3">
    <div data-bind="foreach: questions">
        <div data-bind="template: kind" class="form-group"></div>
    </div>
</form>
<script type="text/template" id="tab">
    <ul data-bind="foreach:items" class="nav nav-tabs">
        <li class="nav-item"><a class="nav-link" data-toggle="tab" data-bind="text: text, attr:{href:'#'+code}"></a></li>
    </ul>
    <div data-bind="foreach:items" class="tab-content border-left border-right border-bottom">
        <div data-bind="attr:{id: code}" class="tab-pane">
            <div data-bind="template: kind"></div>
        </div>
    </div>
</script>
<script type="text/template" id="pane">
    <div data-bind="attr:{id: code}" class="tab-pane">
        <!-- ko foreach: items -->
        <div data-bind="template: kind"></div>
        <!-- /ko -->
    </div>
</script>
<script type="text/template" id="radio">
    <section class="p-2">
        <p data-bind="text: text" class="font-weight-bold mb-0 mb-sm-1"></p>
        <!-- ko foreach: items.filter( function( i) {return i.kind == 'option'}) -->
        <div data-bind="template: kind" class="custom-control custom-radio custom-control-inline"></div>
        <!-- /ko -->
        <!-- ko foreach: items.filter( function( i) {return i.kind != 'option'}) -->
        <div data-bind="template: kind"></div>
        <!-- /ko -->
    </section>
</script>
<script type="text/template" id="select">
    <section class="p-2">
        <p data-bind="text: text"class="font-weight-bold"></p>
        <select data-bind="value: data, options:options, optionsText:'text', optionsValue:'code', attr:{name:code, size:rows}" class="custom-control custom-select ml-sm-2 ml-md-3"></select>
    </section>
</script>
<script type="text/template" id="text">
    <section class="p-2">
        <p data-bind="text: text" class="font-weight-bold mb-0"></p>
        <input type="text" data-bind="value: data, attr:{name:code, size:cols}" class="form-control">
    </section>
</script>
<script type="text/template" id="textarea">
    <section class="form-group row p-3">
        <label  data-bind="text: text" class="font-weight-bold col-md-3 col-lg-2"></label>
        <textarea data-bind="value: data, attr:{name:code, rows:rows, cols:cols}" class="form-control col-12 col-sm-11 col-md-8 mx-auto"></textarea>
    </section>
</script>
<script type="text/template" id="block">
    <section data-bind="visible:values.includes(data())" class="p-2 mt-2 border">
        <p data-bind="text: text" class="mb-1"></p>
        <!-- ko foreach: items -->
        <div data-bind="template: kind"></div>
        <!-- /ko -->
    </section>
</script>
<script type="text/template" id="option">
        <input type="radio" data-bind="checked: $parent.data, attr:{id: code, name: $parent.code, value: code}" class="custom-control-input">
        <label data-bind="text: text, attr: {for: code}" class="custom-control-label"></label>
</script>
<script type="text/template" id="invisible">
</script>
@Scripts.Render("~/bundles/knockout")
@section scripts{
    <script type="text/javascript">
        var StandardOptions = {
            YesNo: [{ code: "A_yes", kind: "option", text: "はい" }, { code: "A_no", kind: "option", text: "いいえ" }],
            Numeric3: [{ code: "1", kind: "option", text: "1" }, { code: "2", kind: "option", text: "2" }, { code: "3", kind: "option", text: "3" }]
        };
        var ViewModel = function () {
            var self = this;
            this.questions = ko.observableArray([]);
        };
        function makeNodes(nodes, parent) {
            return nodes.map(function (v) {
                var node = {};
                node.code = v.code;
                node.kind = v.kind;
                node.text = v.text;
                node.items = [];
                node.depend = v.depend;
                switch (v.kind) {
                    case "tab":
                        node.items = makeNodes(v.items, node);
                        break;
                    case "pane":
                        node.items = makeNodes(v.items, node);
                        break;
                    case "radio":
                        node.data = ko.observable();
                        node.items = makeNodes(v.items, node);
                        break;
                    case "option":
                        node.checked = parent.data;
                        break;
                    case "select":
                        node.data = ko.observable();
                        node.options = v.items.filter( function( i) {return i.kind == 'option'}).map( function ( i) {
                            var option = {};
                            option.text = i.text;
                            option.code = i.code;
                            node.rows = i.rows || null;
                            return option;
                        });
                        break;
                    case "text":
                        node.data = ko.observable();
                        node.cols = v.cols || 20;
                        if (v.rows) {
                            node.kind = "textarea";
                            node.rows = v.rows;
                        }
                        break;
                    case "block":
                        node.values = [];
                        node.items = makeNodes(v.items, node);
                        break;
                }
                return node;
            });

        }
        function remakeNodes(nodes, rootNnodes) {
            nodes.forEach(function (v, i) {
                if (v.depend) {
                    var c = Object.keys(v.depend);
                    if (c[0]) {
                        var node = findNode(rootNnodes, c[0]);
                        if (node != null) {
                            v.values = v.depend[c[0]];
                            v.data = node.data;
                        } else console.log("depend参照不良");
                    } else console.log("depend参照不正");
                }
                remakeNodes(v.items, rootNnodes);
            });
        }
        function findNode(nodes, code) {
            var node = null;
            for ( var i in nodes) {
                if (nodes[i].code == code) {
                    node = nodes[i];
                    break;
                }
                node = findNode(nodes[i].items, code);
                if ( node != null) break;
            }
            return node;
        }
        document.addEventListener("DOMContentLoaded", function () {
            var model = new ViewModel();
            $.getJSON('@Url.Content("~/Questions.json")').done(function (data) {
                var rootNodes = makeNodes(data, null);
                remakeNodes(rootNodes, rootNodes);
                model.questions(rootNodes);
            }).fail(function (errs) {
                console.log(errs);
            });
            ko.applyBindings(model, document.body);
        });
    </script>
}
